name: Java Maven CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  JAR_NAME: greet-app-0.0.1-SNAPSHOT.jar
  ARTIFACT_NAME: greet-app-artifact
  IMAGE_TAG: "1.0.0"   # fixed version tag here

jobs:
  build_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B clean package

  publish-job:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run tests and verify build
        run: mvn --batch-mode verify

      - name: Copy JAR to staging
        run: |
          mkdir -p staging/target
          cp target/${{ env.JAR_NAME }} staging/target/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: staging

  docker_publish:
    runs-on: ubuntu-latest
    needs: publish-job
    steps:
      - uses: actions/checkout@v3

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: staging

      - name: Restore JAR to expected target location
        run: |
          mkdir -p target
          cp staging/target/${{ env.JAR_NAME }} target/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          docker build -t ${{ vars.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .

      - name: Tag Docker image
        run: |
          docker tag ${{ vars.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} ${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Push Docker image to ECR
        run: |
          docker push ${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

  helm_deploy:
    name: Deploy to EKS using Helm
    runs-on: ubuntu-latest
    needs: docker_publish
    environment:
      name: prod
    env:
      IMAGE_TAG: ${{ env.IMAGE_TAG }}
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Set up kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name ${{ vars.EKS_CLUSTER_NAME }} --region ${{ vars.AWS_REGION }}

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          helm version

      - name: Lint Helm chart
        run: helm lint ./helm-chart

      - name: Deploy with Helm
        run: |
          helm upgrade --install greet ./helm-chart \
            --namespace default \
            --set image.repository=${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }} \
            --set image.tag=${{ env.IMAGE_TAG }} \
            --set image.pullPolicy=Always
